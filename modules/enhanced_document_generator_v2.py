import asyncio\nimport json\nfrom typing import Dict, List, Optional, Any\nfrom datetime import datetime, timedelta\nfrom dataclasses import dataclass\nfrom utils import get_logger, prompt_loader\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import BytesIO\nimport base64\n\nlogger = get_logger(__name__)\n\nclass EnhancedDocumentGenerator:\n    \"\"\"\ub525\ub9ac\uc11c\uce58 \uae30\ubc18 \uace0\uae09 \ubb38\uc11c \uc0dd\uc131\uae30\"\"\"\n    \n    def __init__(self, research_engine_type: str = 'default', research_config: dict = None):\n        logger.info(\"EnhancedDocumentGenerator \ucd08\uae30\ud654\")\n        \n        try:\n            from modules.llm_module import LlmModule\n            from modules.deep_research_engine import (\n                DeepResearchEngineFactory,\n                ResearchConfig,\n                ResearchDepth,\n                ResearchFocus\n            )\n            \n            self.llm_module = LlmModule()\n            \n            # \ub525\ub9ac\uc11c\uce58 \uc5d4\uc9c4 \uc124\uc815\n            if research_config:\n                config = ResearchConfig(**research_config)\n            else:\n                config = ResearchConfig()\n            \n            self.research_engine = DeepResearchEngineFactory.create_engine(\n                engine_type=research_engine_type,\n                config=config\n            )\n            \n            logger.info(f\"\ub525\ub9ac\uc11c\uce58 \uc5d4\uc9c4 \ucd08\uae30\ud654: {research_engine_type}\")\n            \n        except Exception as e:\n            logger.error(f\"\ubaa8\ub4c8 \ub85c\ub4dc \uc2e4\ud328: {e}\")\n            raise e\n    \n    async def generate_comprehensive_procurement_document(\n        self, \n        request_data: Dict[str, Any]\n    ) -> Dict[str, Any]:\n        \"\"\"\uc885\ud569 \uc870\ub2ec \ubb38\uc11c \uc0dd\uc131\"\"\"\n        logger.info(\"\uc885\ud569 \uc870\ub2ec \ubb38\uc11c \uc0dd\uc131 \uc2dc\uc791\")\n        \n        # 1. \ub525\ub9ac\uc11c\uce58 \uc218\ud589 (\uc0c8\ub85c\uc6b4 \uc5d4\uc9c4 \uc0ac\uc6a9)\n        research_result = await self.research_engine.conduct_research(request_data)\n        \n        # 2. \ube44\uc988\ub2c8\uc2a4 \ubb38\uc11c \uc0dd\uc131\n        document = await self._generate_business_document({\n            'request': request_data,\n            'research': research_result\n        })\n        \n        logger.info(\"\uc885\ud569 \uc870\ub2ec \ubb38\uc11c \uc0dd\uc131 \uc644\ub8cc\")\n        return document\n    \n    async def _conduct_deep_research(self, request_data: Dict) -> 'DeepResearchResult':\n        \"\"\"\ub525\ub9ac\uc11c\uce58 \uc218\ud589 (\uc0c8\ub85c\uc6b4 \uc5d4\uc9c4 \uc0ac\uc6a9)\"\"\"\n        return await self.research_engine.conduct_research(request_data)\n    \n    async def _analyze_market_conditions(self, request_data: Dict) -> Dict[str, Any]:\n        \"\"\"\uc2dc\uc7a5 \uc0c1\ud669 \ubd84\uc11d (\uc0c8\ub85c\uc6b4 \uc5d4\uc9c4 \uc0ac\uc6a9)\"\"\"\n        return await self.research_engine.analyze_market_conditions(request_data)\n    \n    async def _generate_business_document(self, data: Dict) -> Dict[str, Any]:\n        \"\"\"\ube44\uc988\ub2c8\uc2a4 \ubb38\uc11c \uc0dd\uc131\"\"\"\n        logger.debug(\"\ube44\uc988\ub2c8\uc2a4 \ubb38\uc11c \uc0dd\uc131 \uc911\")\n        \n        research_result = data.get('research')\n        \n        # HTML \ud15c\ud50c\ub9bf \uae30\ubc18 \ubb38\uc11c \uc0dd\uc131\n        html_content = await self._create_html_document(data)\n        \n        # \ucc28\ud2b8 \ubc0f \uadf8\ub798\ud504 \uc0dd\uc131\n        charts = await self._generate_charts(research_result)\n        \n        # \uc694\uc57d \ubcf4\uace0\uc11c \uc0dd\uc131\n        executive_summary = await self._generate_executive_summary(data)\n        \n        # \uc0c1\uc138 \ubd84\uc11d \ubcf4\uace0\uc11c\n        detailed_analysis = await self._generate_detailed_analysis(data)\n        \n        document = {\n            'html_content': html_content,\n            'charts': charts,\n            'executive_summary': executive_summary,\n            'detailed_analysis': detailed_analysis,\n            'metadata': {\n                'generated_at': datetime.now().isoformat(),\n                'document_type': 'comprehensive_procurement_analysis',\n                'confidence_score': research_result.confidence_score if research_result else 0.8,\n                'data_sources': research_result.data_sources if research_result else [],\n                'execution_time': research_result.execution_time if research_result else 0.0\n            }\n        }\n        \n        return document\n    \n    async def _create_html_document(self, data: Dict) -> str:\n        \"\"\"\uace0\uae09 HTML \ubb38\uc11c \uc0dd\uc131\"\"\"\n        html_template = '''\n<!DOCTYPE html>\n<html lang=\"ko\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>\uc870\ub2ec \ubd84\uc11d \ubcf4\uace0\uc11c</title>\n    <style>\n        body {{ font-family: 'Segoe UI', sans-serif; margin: 0; padding: 20px; background: #f8f9fa; }}\n        .container {{ max-width: 1200px; margin: 0 auto; background: white; padding: 40px; border-radius: 10px; box-shadow: 0 4px 15px rgba(0,0,0,0.1); }}\n        .header {{ text-align: center; margin-bottom: 40px; padding-bottom: 20px; border-bottom: 3px solid #007bff; }}\n        .header h1 {{ color: #007bff; font-size: 2.5rem; margin: 0; }}\n        .header .subtitle {{ color: #6c757d; font-size: 1.1rem; margin-top: 10px; }}\n        .section {{ margin: 40px 0; }}\n        .section h2 {{ color: #343a40; font-size: 1.8rem; border-left: 5px solid #007bff; padding-left: 20px; }}\n        .info-grid {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin: 20px 0; }}\n        .info-card {{ background: #f8f9fa; padding: 20px; border-radius: 8px; border-left: 4px solid #28a745; }}\n        .info-card h4 {{ margin: 0 0 10px 0; color: #28a745; }}\n        .table {{ width: 100%; border-collapse: collapse; margin: 20px 0; }}\n        .table th, .table td {{ padding: 12px; text-align: left; border-bottom: 1px solid #dee2e6; }}\n        .table th {{ background: #007bff; color: white; }}\n        .table tr:hover {{ background: #f8f9fa; }}\n        .alert {{ padding: 15px; margin: 20px 0; border-radius: 5px; }}\n        .alert-info {{ background: #d1ecf1; border: 1px solid #bee5eb; color: #0c5460; }}\n        .alert-success {{ background: #d4edda; border: 1px solid #c3e6cb; color: #155724; }}\n        .chart-container {{ text-align: center; margin: 30px 0; }}\n        .footer {{ text-align: center; margin-top: 50px; padding-top: 20px; border-top: 1px solid #dee2e6; color: #6c757d; }}\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>\uc870\ub2ec \ubd84\uc11d \ubcf4\uace0\uc11c</h1>\n            <div class=\"subtitle\">AI \uae30\ubc18 \uc885\ud569 \uc2dc\uc7a5 \ubd84\uc11d \ubc0f \uad6c\ub9e4 \uad8c\uace0</div>\n            <div style=\"margin-top: 15px; color: #007bff;\">\uc0dd\uc131\uc77c\uc2dc: {generated_time}</div>\n        </div>\n        \n        <div class=\"section\">\n            <h2>\ud83d\udccb \uc870\ub2ec \uc694\uccad \uc815\ubcf4</h2>\n            <div class=\"info-grid\">\n                <div class=\"info-card\">\n                    <h4>\ud488\uba85</h4>\n                    <p>{product_name}</p>\n                </div>\n                <div class=\"info-card\">\n                    <h4>\uaddc\uaca9</h4>\n                    <p>{specifications}</p>\n                </div>\n                <div class=\"info-card\">\n                    <h4>\uc218\ub7c9</h4>\n                    <p>{quantity}</p>\n                </div>\n                <div class=\"info-card\">\n                    <h4>\uc608\uc0c1\ub2e8\uac00</h4>\n                    <p>{budget}</p>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"section\">\n            <h2>\ud83d\udcca \uc2dc\uc7a5 \ubd84\uc11d \uacb0\uacfc</h2>\n            <div class=\"alert alert-info\">\n                <strong>\uc2dc\uc7a5 \ud604\ud669:</strong> \ucd1d {total_products}\uac1c \uc81c\ud488 \ubd84\uc11d, {supplier_count}\uac1c \uacf5\uae09\uc5c5\uccb4 \ud655\uc778\n            </div>\n            \n            <div class=\"chart-container\">\n                <img src=\"data:image/png;base64,{price_chart}\" alt=\"\uac00\uaca9 \ubd84\uc11d \ucc28\ud2b8\" style=\"max-width: 100%; height: auto;\">\n            </div>\n        </div>\n        \n        <div class=\"section\">\n            <h2>\ud83c\udfe2 \uacf5\uae09\uc5c5\uccb4 \ud3c9\uac00</h2>\n            <table class=\"table\">\n                <thead>\n                    <tr><th>\uc5c5\uccb4\uba85</th><th>\uc885\ud569\uc810\uc218</th><th>\uac00\uaca9\uacbd\uc7c1\ub825</th><th>\ud488\uc9c8\uc2e0\ub8b0\ub3c4</th><th>\ub0a9\uae30\uc900\uc218\uc728</th><th>\ud3c9\uac00</th></tr>\n                </thead>\n                <tbody>\n                    {supplier_rows}\n                </tbody>\n            </table>\n        </div>\n        \n        <div class=\"section\">\n            <h2>\ud83d\udca1 \uad8c\uace0\uc0ac\ud56d</h2>\n            <div class=\"alert alert-success\">\n                <h4>\uc8fc\uc694 \uad8c\uace0\uc0ac\ud56d</h4>\n                <ul>\n                    {recommendations}\n                </ul>\n            </div>\n        </div>\n        \n        <div class=\"footer\">\n            <p>\ubcf8 \ubcf4\uace0\uc11c\ub294 AI \uc2dc\uc2a4\ud15c\uc5d0 \uc758\ud574 \uc790\ub3d9 \uc0dd\uc131\ub418\uc5c8\uc2b5\ub2c8\ub2e4.</p>\n            <p>\ucd5c\uc885 \uc758\uc0ac\uacb0\uc815 \uc2dc \uc804\ubb38\uac00 \uac80\ud1a0\ub97c \uad8c\uc7a5\ud569\ub2c8\ub2e4.</p>\n            <p>\uc2e0\ub8b0\ub3c4: {confidence_score:.1%} | \uc2e4\ud589\uc2dc\uac04: {execution_time:.2f}\ucd08</p>\n        </div>\n    </div>\n</body>\n</html>\n        '''\n        \n        # \ub370\uc774\ud130 \ucd94\ucd9c\n        request_data = data.get('request', {})\n        research_result = data.get('research')\n        \n        if research_result:\n            market_data = research_result.market_analysis\n            suppliers = research_result.supplier_evaluation\n            recommendations = research_result.recommendations\n            confidence_score = research_result.confidence_score\n            execution_time = research_result.execution_time\n        else:\n            market_data = {}\n            suppliers = []\n            recommendations = []\n            confidence_score = 0.8\n            execution_time = 0.0\n        \n        # \uacf5\uae09\uc5c5\uccb4 \ud14c\uc774\ube14 \uc0dd\uc131\n        supplier_rows = \"\"\n        for supplier in suppliers[:5]:\n            score = supplier.get('overall_score', 0)\n            eval_data = supplier.get('evaluation', {})\n            supplier_rows += f'''\n            <tr>\n                <td>{supplier.get('name', 'N/A')}</td>\n                <td>{score:.1f}/5.0</td>\n                <td>{eval_data.get('\uac00\uaca9 \uacbd\uc7c1\ub825', 0):.1f}</td>\n                <td>{eval_data.get('\ud488\uc9c8 \uc2e0\ub8b0\ub3c4', 0):.1f}</td>\n                <td>{eval_data.get('\ub0a9\uae30 \uc900\uc218\uc728', 0):.1f}</td>\n                <td>{'\uc6b0\uc218' if score >= 4.0 else '\ubcf4\ud1b5' if score >= 3.0 else '\uac1c\uc120\ud544\uc694'}</td>\n            </tr>\n            '''\n        \n        # \ucd94\ucc9c\uc0ac\ud56d \ub9ac\uc2a4\ud2b8 \uc0dd\uc131\n        recommendations_html = \"\".join([f\"<li>{rec}</li>\" for rec in recommendations])\n        \n        # \ucc28\ud2b8 \uc0dd\uc131\n        price_chart = await self._generate_price_chart(market_data)\n        \n        # \ud15c\ud50c\ub9bf \ud3ec\ub9f7\ud305\n        html_content = html_template.format(\n            generated_time=datetime.now().strftime(\"%Y\ub144 %m\uc6d4 %d\uc77c %H:%M\"),\n            product_name=request_data.get('\ud488\uba85', 'N/A'),\n            specifications=request_data.get('\uaddc\uaca9', 'N/A'),\n            quantity=request_data.get('\uc218\ub7c9', 'N/A'),\n            budget=request_data.get('\uc608\uc0c1\ub2e8\uac00', 'N/A'),\n            total_products=market_data.get('total_products', 0),\n            supplier_count=market_data.get('supplier_count', 0),\n            price_chart=price_chart,\n            supplier_rows=supplier_rows,\n            recommendations=recommendations_html,\n            confidence_score=confidence_score,\n            execution_time=execution_time\n        )\n        \n        return html_content\n    \n    async def _generate_charts(self, research_result) -> Dict[str, str]:\n        \"\"\"\ucc28\ud2b8 \uc0dd\uc131\"\"\"\n        charts = {}\n        \n        if not research_result:\n            return charts\n        \n        # \uac00\uaca9 \ube44\uad50 \ucc28\ud2b8\n        price_chart = await self._generate_price_chart(research_result.market_analysis)\n        charts['price_comparison'] = price_chart\n        \n        # \uacf5\uae09\uc5c5\uccb4 \ud3c9\uac00 \ucc28\ud2b8\n        supplier_chart = await self._generate_supplier_chart(research_result.supplier_evaluation)\n        charts['supplier_evaluation'] = supplier_chart\n        \n        # \ub9ac\uc2a4\ud06c \ubd84\uc11d \ucc28\ud2b8\n        risk_chart = await self._generate_risk_chart(research_result.risk_assessment)\n        charts['risk_analysis'] = risk_chart\n        \n        return charts\n    \n    async def _generate_price_chart(self, market_data: Dict) -> str:\n        \"\"\"\uac00\uaca9 \ucc28\ud2b8 \uc0dd\uc131\"\"\"\n        try:\n            plt.figure(figsize=(10, 6))\n            \n            # \uc0d8\ud50c \ub370\uc774\ud130 (market_data\uc5d0\uc11c \ucd94\ucd9c)\n            categories = ['\ucd5c\uc800\uac00', '\ud3c9\uade0\uac00', '\ucd5c\uace0\uac00', '\uad8c\uc7a5\uac00']\n            price_range = market_data.get('price_range', {})\n            prices = [\n                price_range.get('min', 100000),\n                price_range.get('avg', 200000),\n                price_range.get('max', 300000),\n                price_range.get('recommended', 180000)\n            ]\n            \n            colors = ['#28a745', '#007bff', '#dc3545', '#ffc107']\n            bars = plt.bar(categories, prices, color=colors)\n            \n            plt.title('\uc2dc\uc7a5 \uac00\uaca9 \ubd84\uc11d', fontsize=16, fontweight='bold')\n            plt.ylabel('\uac00\uaca9 (\uc6d0)')\n            plt.grid(axis='y', alpha=0.3)\n            \n            # \ub9c9\ub300 \uc704\uc5d0 \uac12 \ud45c\uc2dc\n            for bar, price in zip(bars, prices):\n                plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + max(prices)*0.01,\n                        f'{price:,}\uc6d0', ha='center', va='bottom')\n            \n            plt.tight_layout()\n            \n            # \uc774\ubbf8\uc9c0\ub97c base64\ub85c \uc778\ucf54\ub529\n            buffer = BytesIO()\n            plt.savefig(buffer, format='png', dpi=300, bbox_inches='tight')\n            buffer.seek(0)\n            chart_data = base64.b64encode(buffer.getvalue()).decode()\n            plt.close()\n            \n            return chart_data\n            \n        except Exception as e:\n            logger.warning(f\"\uac00\uaca9 \ucc28\ud2b8 \uc0dd\uc131 \uc2e4\ud328: {e}\")\n            return \"\"\n    \n    async def _generate_supplier_chart(self, suppliers: List[Dict]) -> str:\n        \"\"\"\uacf5\uae09\uc5c5\uccb4 \ud3c9\uac00 \ucc28\ud2b8 \uc0dd\uc131\"\"\"\n        try:\n            if not suppliers:\n                return \"\"\n            \n            plt.figure(figsize=(12, 8))\n            \n            # \uc0c1\uc704 5\uac1c \uacf5\uae09\uc5c5\uccb4\n            top_suppliers = suppliers[:5]\n            names = [s.get('name', f'\uc5c5\uccb4{i+1}') for i, s in enumerate(top_suppliers)]\n            scores = [s.get('overall_score', 0) for s in top_suppliers]\n            \n            colors = plt.cm.RdYlGn([score/5.0 for score in scores])\n            bars = plt.barh(names, scores, color=colors)\n            \n            plt.title('\uacf5\uae09\uc5c5\uccb4 \uc885\ud569 \ud3c9\uac00', fontsize=16, fontweight='bold')\n            plt.xlabel('\uc885\ud569 \uc810\uc218')\n            plt.xlim(0, 5)\n            plt.grid(axis='x', alpha=0.3)\n            \n            # \uc810\uc218 \ud45c\uc2dc\n            for bar, score in zip(bars, scores):\n                plt.text(bar.get_width() + 0.05, bar.get_y() + bar.get_height()/2,\n                        f'{score:.1f}', va='center')\n            \n            plt.tight_layout()\n            \n            buffer = BytesIO()\n            plt.savefig(buffer, format='png', dpi=300, bbox_inches='tight')\n            buffer.seek(0)\n            chart_data = base64.b64encode(buffer.getvalue()).decode()\n            plt.close()\n            \n            return chart_data\n            \n        except Exception as e:\n            logger.warning(f\"\uacf5\uae09\uc5c5\uccb4 \ucc28\ud2b8 \uc0dd\uc131 \uc2e4\ud328: {e}\")\n            return \"\"\n    \n    async def _generate_risk_chart(self, risks: Dict) -> str:\n        \"\"\"\ub9ac\uc2a4\ud06c \ucc28\ud2b8 \uc0dd\uc131\"\"\"\n        try:\n            if not risks:\n                return \"\"\n            \n            plt.figure(figsize=(10, 8))\n            \n            risk_categories = ['\uc608\uc0b0', '\uacf5\uae09', '\ud488\uc9c8', '\ub0a9\uae30', '\uc2dc\uc7a5']\n            risk_levels = []\n            \n            for category in ['budget_risk', 'supply_risk', 'quality_risk', 'delivery_risk', 'market_risk']:\n                level = risks.get(category, {}).get('level', 0)\n                risk_levels.append(level)\n            \n            # \ub808\uc774\ub354 \ucc28\ud2b8\n            angles = [i * 2 * 3.14159 / len(risk_categories) for i in range(len(risk_categories))]\n            angles += angles[:1]  # \uc6d0\ud615\uc73c\ub85c \ub9cc\ub4e4\uae30\n            risk_levels += risk_levels[:1]\n            \n            ax = plt.subplot(111, projection='polar')\n            ax.plot(angles, risk_levels, 'o-', linewidth=2, color='#dc3545')\n            ax.fill(angles, risk_levels, alpha=0.25, color='#dc3545')\n            ax.set_xticks(angles[:-1])\n            ax.set_xticklabels(risk_categories)\n            ax.set_ylim(0, 5)\n            ax.set_title('\ub9ac\uc2a4\ud06c \ubd84\uc11d', size=16, fontweight='bold', pad=20)\n            ax.grid(True)\n            \n            plt.tight_layout()\n            \n            buffer = BytesIO()\n            plt.savefig(buffer, format='png', dpi=300, bbox_inches='tight')\n            buffer.seek(0)\n            chart_data = base64.b64encode(buffer.getvalue()).decode()\n            plt.close()\n            \n            return chart_data\n            \n        except Exception as e:\n            logger.warning(f\"\ub9ac\uc2a4\ud06c \ucc28\ud2b8 \uc0dd\uc131 \uc2e4\ud328: {e}\")\n            return \"\"\n    \n    async def _generate_executive_summary(self, data: Dict) -> str:\n        \"\"\"\uacbd\uc601\uc9c4 \uc694\uc57d \ubcf4\uace0\uc11c \uc0dd\uc131\"\"\"\n        request_data = data.get('request', {})\n        research_result = data.get('research')\n        \n        if not research_result:\n            return \"\ubb38\uc11c \uc0dd\uc131 \uc911 \uc624\ub958\uac00 \ubc1c\uc0dd\ud588\uc2b5\ub2c8\ub2e4.\"\n        \n        market_data = research_result.market_analysis\n        risks = research_result.risk_assessment\n        \n        summary = f\"\"\"\n# \uacbd\uc601\uc9c4 \uc694\uc57d \ubcf4\uace0\uc11c\n\n## \uc870\ub2ec \uac1c\uc694\n- **\ud488\ubaa9**: {request_data.get('\ud488\uba85', 'N/A')}\n- **\uc608\uc0c1 \uc608\uc0b0**: {request_data.get('\uc608\uc0c1\ub2e8\uac00', 'N/A')}\n- **\uc218\ub7c9**: {request_data.get('\uc218\ub7c9', 'N/A')}\n\n## \ud575\uc2ec \ubd84\uc11d \uacb0\uacfc\n- **\uc2dc\uc7a5 \uaddc\ubaa8**: {market_data.get('total_products', 0)}\uac1c \uc81c\ud488 \ud655\uc778\n- **\uacf5\uae09\uc5c5\uccb4 \ud604\ud669**: {market_data.get('supplier_count', 0)}\uac1c \uc5c5\uccb4 \ud655\uc778\n- **\uc2e0\ub8b0\ub3c4**: {research_result.confidence_score:.1%}\n\n## \uc8fc\uc694 \uad8c\uace0\uc0ac\ud56d\n{chr(10).join([f'- {rec}' for rec in research_result.recommendations[:3]])}\n\n## \uacb0\ub860\n\ubcf8 \ubd84\uc11d\uc740 AI \uc2dc\uc2a4\ud15c \uae30\ubc18\uc73c\ub85c \uc0dd\uc131\ub418\uc5c8\uc73c\uba70, \ucd5c\uc885 \uc758\uc0ac\uacb0\uc815 \uc2dc \uc804\ubb38\uac00 \uac80\ud1a0\ub97c \uad8c\uc7a5\ud569\ub2c8\ub2e4.\n        \"\"\"\n        \n        return summary.strip()\n    \n    async def _generate_detailed_analysis(self, data: Dict) -> str:\n        \"\"\"\uc0c1\uc138 \ubd84\uc11d \ubcf4\uace0\uc11c \uc0dd\uc131\"\"\"\n        # LLM\uc744 \ud1b5\ud55c \uc0c1\uc138 \ubd84\uc11d \uc0dd\uc131\n        if self.llm_module and self.llm_module.check_server_health():\n            research_result = data.get('research')\n            if research_result:\n                analysis_prompt = f\"\"\"\n\ub2e4\uc74c \ub525\ub9ac\uc11c\uce58 \uacb0\uacfc\ub97c \uae30\ubc18\uc73c\ub85c \uc0c1\uc138\ud55c \ubd84\uc11d \ubcf4\uace0\uc11c\ub97c \uc791\uc131\ud574\uc8fc\uc138\uc694:\n\n\uc694\uccad \uc815\ubcf4: {json.dumps(data.get('request', {}), ensure_ascii=False)}\n\uc2dc\uc7a5 \ubd84\uc11d: {json.dumps(research_result.market_analysis, ensure_ascii=False)}\n\uacf5\uae09\uc5c5\uccb4 \ud3c9\uac00: {len(research_result.supplier_evaluation)}\uac1c \uc5c5\uccb4\n\ub9ac\uc2a4\ud06c \ud3c9\uac00: {json.dumps(research_result.risk_assessment, ensure_ascii=False)}\n\n\ub2e4\uc74c \uad00\uc810\uc5d0\uc11c \ubd84\uc11d\ud574\uc8fc\uc138\uc694:\n1. \uc2dc\uc7a5 \ud3ec\uc9c0\uc154\ub2dd \ubd84\uc11d\n2. \uacbd\uc7c1 \uc6b0\uc704 \uc694\uc18c\n3. \uc870\ub2ec \ucd5c\uc801\ud654 \ubc29\uc548\n4. \ud5a5\ud6c4 \uc2dc\uc7a5 \uc804\ub9dd\n5. \uad6c\uccb4\uc801 \uc2e4\ud589 \uacc4\ud68d\n\n\uc804\ubb38\uc801\uc774\uace0 \uc2e4\uc6a9\uc801\uc778 \ubd84\uc11d\uc744 \uc81c\uacf5\ud574\uc8fc\uc138\uc694.\n                \"\"\"\n                \n                try:\n                    detailed_analysis = self.llm_module.generate_completion(analysis_prompt, max_tokens=1000)\n                    return detailed_analysis\n                except Exception as e:\n                    logger.warning(f\"LLM \uc0c1\uc138 \ubd84\uc11d \uc0dd\uc131 \uc2e4\ud328: {e}\")\n        \n        # \uae30\ubcf8 \uc0c1\uc138 \ubd84\uc11d\n        return \"\"\"\n# \uc0c1\uc138 \ubd84\uc11d \ubcf4\uace0\uc11c\n\n## \uc2dc\uc7a5 \ubd84\uc11d\n\ud604\uc7ac \uc2dc\uc7a5 \uc0c1\ud669\uc744 \uc885\ud569\uc801\uc73c\ub85c \ubd84\uc11d\ud55c \uacb0\uacfc, \uc548\uc815\uc801\uc778 \uc870\ub2ec \ud658\uacbd\uc774 \uc870\uc131\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.\n\n## \uacf5\uae09\uc5c5\uccb4 \ubd84\uc11d\n\ub2e4\uc591\ud55c \uacf5\uae09\uc5c5\uccb4\uac00 \uacbd\uc7c1\ud558\uace0 \uc788\uc5b4 \uc120\ud0dd\uc758 \ud3ed\uc774 \ub113\uc2b5\ub2c8\ub2e4.\n\n## \ub9ac\uc2a4\ud06c \uad00\ub9ac\n\uc8fc\uc694 \ub9ac\uc2a4\ud06c \uc694\uc778\ub4e4\uc774 \uc2dd\ubcc4\ub418\uc5c8\uc73c\uba70, \uc801\uc808\ud55c \uad00\ub9ac \ubc29\uc548\uc774 \ud544\uc694\ud569\ub2c8\ub2e4.\n\n## \uad8c\uace0\uc0ac\ud56d\n\uc804\ubb38\uac00 \uac80\ud1a0\ub97c \ud1b5\ud55c \ucd5c\uc885 \uc758\uc0ac\uacb0\uc815\uc744 \uad8c\uc7a5\ud569\ub2c8\ub2e4.\n        \"\"\"\n\n# \ub514\ubc84\uadf8 \ubc0f \ud14c\uc2a4\ud2b8\nif __name__ == \"__main__\":\n    async def test_enhanced_generator():\n        # \uae30\ubcf8 \uc5d4\uc9c4 \ud14c\uc2a4\ud2b8\n        generator = EnhancedDocumentGenerator('default')\n        \n        test_request = {\n            '\ud488\uba85': 'GPU \uadf8\ub798\ud53d\uce74\ub4dc',\n            '\uaddc\uaca9': 'RTX 4070, 12GB VRAM',\n            '\uc218\ub7c9': '3\uac1c',\n            '\uc608\uc0c1\ub2e8\uac00': '1,500,000\uc6d0',\n            '\uc0ac\uc6a9\uc6a9\ub3c4': 'AI \uba38\uc2e0\ub7ec\ub2dd \uc791\uc5c5\uc6a9'\n        }\n        \n        try:\n            document = await generator.generate_comprehensive_procurement_document(test_request)\n            \n            print(\"=== \uc885\ud569 \uc870\ub2ec \ubb38\uc11c \uc0dd\uc131 \uc644\ub8cc ===\")\n            print(f\"\uc2e0\ub8b0\ub3c4: {document['metadata']['confidence_score']:.1%}\")\n            print(f\"\uc2e4\ud589\uc2dc\uac04: {document['metadata']['execution_time']:.2f}\ucd08\")\n            print(f\"\ub370\uc774\ud130 \uc18c\uc2a4: {', '.join(document['metadata']['data_sources'])}\")\n            print(\"\\n=== \uacbd\uc601\uc9c4 \uc694\uc57d ===\")\n            print(document['executive_summary'])\n            \n        except Exception as e:\n            logger.error(f\"\ud14c\uc2a4\ud2b8 \uc2e4\ud328: {e}\")\n    \n    # \uac00\uaca9 \uc911\uc2ec \uc5d4\uc9c4 \ud14c\uc2a4\ud2b8\n    async def test_price_focused():\n        config = {\n            'focus': 'price_focused',\n            'depth': 'comprehensive',\n            'max_products': 100\n        }\n        generator = EnhancedDocumentGenerator('price_focused', config)\n        \n        # \ud14c\uc2a4\ud2b8 \uc2e4\ud589...\n        print(\"\uac00\uaca9 \uc911\uc2ec \ubd84\uc11d \uc5d4\uc9c4 \ucd08\uae30\ud654 \uc644\ub8cc\")\n    \n    asyncio.run(test_enhanced_generator())\n